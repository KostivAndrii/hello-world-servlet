AWSTemplateFormatVersion: 2010-09-09

Metadata:
 AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - Environment
          - VPCBlock
      -
        Label:
          default: "Subnets CIDR Blocks"
        Parameters:
          - PublicSubnetACIDR
          - PrivateSubnetACIDR
          - PublicSubnetBCIDR
          - PrivateSubnetBCIDR
          - NATGWInstanceTypeParameter
      - 
        Label: 
          default: "SSH key"
        Parameters: 
          - KeyName

Parameters:
  Environment:
    Type: String
    Default: "PROD"
  VPCBlock:
    Type: String
    Default: '10.0.0.0/16'  

  PublicSubnetACIDR: 
    Type: String
    Default: '10.0.10.0/24'
    Description: "Public Subnet-A CIDR"
  PrivateSubnetACIDR: 
    Type: String
    Default: '10.0.11.0/24'
    Description: "Private Subnet-A CIDR"
  PublicSubnetBCIDR: 
    Type: String
    Default: '10.0.20.0/24'
    Description: "Public Subnet-B CIDR"
  PrivateSubnetBCIDR: 
    Type: String
    Default: '10.0.21.0/24'
    Description: "Private Subnet-B CIDR"
    
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the EC2 instance.'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: '1'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  NATGWInstanceTypeParameter: 
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
    Description: Enter Instance Type for NAT GateWay. Default is t2.micro.

Resources:

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref VPCBlock
      Tags:
        - Key: Name
          Value: !Ref Environment

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: 
      Tags:
        - Key: Name
          Value: !Ref Environment

  GatewayAttachmentInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

#==================================================== Public SubnetA =========	  
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref PublicSubnetACIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PublicSubnetA" ] ]

#====== Public RouteTables =========	  
  PublicRouteTablesA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PublicRouteTablesA" ] ]

#======= Routes for Public Subnet RouteTables with IGW 
  PublicRouteA:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTablesA
      GatewayId: !Ref InternetGateway
    DependsOn:
      - GatewayAttachmentInternet

#====== Associate Public Route for Public Subnets
  RouteAssociationPublicSubnetA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTablesA
      SubnetId: !Ref PublicSubnetA

#==================================================== Public SubnetB =========	  
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref PublicSubnetBCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PublicSubnetB" ] ]

#====== Public RouteTablesB =========	  
  PublicRouteTablesB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PublicRouteTablesB" ] ]

#======= Routes for Public Subnet RouteTablesB with IGW 
  PublicRouteB:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTablesB
      GatewayId: !Ref InternetGateway
    DependsOn:
      - GatewayAttachmentInternet

#====== Associate Public Route for Public SubnetsB
  RouteAssociationPublicSubnetB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTablesB
      SubnetId: !Ref PublicSubnetB

#==================================================== Privat SubnetA =========	  
  PrivatSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref PrivateSubnetACIDR
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PrivatSubnetA" ] ]

#====== Privat RouteTablesA =========	  
  PrivatRouteTablesA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PrivatRouteTablesA" ] ]

#======= Routes for Privat Subnet RouteTablesA with IGW 
  PrivatRouteA:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivatRouteTablesA
#      GatewayId: !Ref InternetGateway
      InstanceId: !Ref NATGWInstanceA
    DependsOn:
#      - GatewayAttachmentInternet
      - NATGWInstanceA

#====== Associate Privat Route for Public Subnets
  RouteAssociationPrivatSubnetA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivatRouteTablesA
      SubnetId: !Ref PrivatSubnetA

#==================================================== Privat SubnetB =========	  
  PrivatSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref PrivateSubnetBCIDR
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PrivatSubnetB" ] ]

#====== Privat RouteTablesA =========	  
  PrivatRouteTablesB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PrivatRouteTablesB" ] ]

#======= Routes for Privat Subnet RouteTablesA with IGW 
  PrivatRouteB:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivatRouteTablesB
#      GatewayId: !Ref InternetGateway
      InstanceId: !Ref NATGWInstanceB
    DependsOn:
#      - GatewayAttachmentInternet
      - NATGWInstanceB

#====== Associate Privat Route for Public Subnets
  RouteAssociationPrivatSubnetB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivatRouteTablesB
      SubnetId: !Ref PrivatSubnetB

#====== NAT GW SecurityGroup
  NATGWSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access from SSH traffic and local traffic
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "NATGWSecurityGroup" ] ]

#====== NAT GW instanceA
  NATGWInstanceA:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref NATGWInstanceTypeParameter
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      KeyName: !Ref KeyName
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "NATGWA" ] ]          
      NetworkInterfaces:
        - GroupSet:
            - !Ref NATGWSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnetA
      UserData: 
        Fn::Base64: 
          !Sub | 
            #!/bin/bash -xe 
            sed -i "s/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/" /etc/sysctl.conf 
            sysctl -p 
            echo "iptables -t nat -A POSTROUTING -s 10.0.0.0/16 -j MASQUERADE" >> /etc/rc.local 
            iptables -t nat -A POSTROUTING -s 10.0.0.0/16 -j MASQUERADE 

#====== NAT GW instanceB
  NATGWInstanceB:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref NATGWInstanceTypeParameter
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      KeyName: !Ref KeyName
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "NATGWB" ] ]          
      NetworkInterfaces:
        - GroupSet:
            - !Ref NATGWSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnetB
      UserData: 
        Fn::Base64: 
          !Sub | 
            #!/bin/bash -xe 
            sed -i "s/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/" /etc/sysctl.conf 
            sysctl -p 
            echo "iptables -t nat -A POSTROUTING -s 10.0.0.0/16 -j MASQUERADE" >> /etc/rc.local 
            iptables -t nat -A POSTROUTING -s 10.0.0.0/16 -j MASQUERADE 

#====== Nested STECK with PublicServers (FrontEnd) A
  PublicServerA:
    Type: AWS::CloudFormation::Stack
    Properties:
#      TemplateURL: https://s3.eu-west-3.amazonaws.com/cf-templates-1ldvye973texh-eu-west-3/2019130U9j-tomcat-v.2.12oqo2t30rm7d
      TemplateURL: https://s3.eu-west-3.amazonaws.com/cf-templates-1ldvye973texh-eu-west-3/2019132uK8-tomcat-v.2.14xqm2h1i4op
      TimeoutInMinutes: '60'
      Parameters:
        Environment:
          Ref: Environment
        KeyName:
          Ref: KeyName
        VPC:
          Ref: VPC
        PublicSubnet:
          Ref: PublicSubnetA
    DependsOn:
      - PublicRouteA

#====== Nested STECK with PublicServers (FrontEnd) B
  PublicServerB:
    Type: AWS::CloudFormation::Stack
    Properties:
#      TemplateURL: https://s3.eu-west-3.amazonaws.com/cf-templates-1ldvye973texh-eu-west-3/2019130U9j-tomcat-v.2.12oqo2t30rm7d
      TemplateURL: https://s3.eu-west-3.amazonaws.com/cf-templates-1ldvye973texh-eu-west-3/2019132uK8-tomcat-v.2.14xqm2h1i4op
      TimeoutInMinutes: '60'
      Parameters:
        Environment:
          Ref: Environment
        KeyName:
          Ref: KeyName
        VPC:
          Ref: VPC
        PublicSubnet:
          Ref: PublicSubnetB
    DependsOn:
      - PublicRouteB

#====== PrivatInstanceA
  PrivatInstanceA:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      KeyName: !Ref KeyName
      Tags:
        - Key: VM
          Value: BackEnd
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "BackEndA" ] ]
      NetworkInterfaces:
        - GroupSet:
            - !Ref NATGWSecurityGroup
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivatSubnetA

#====== PrivatInstanceB
  PrivatInstanceB:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      KeyName: !Ref KeyName
      Tags:
        - Key: VM
          Value: BackEnd
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "BackEndB" ] ]
      NetworkInterfaces:
        - GroupSet:
            - !Ref NATGWSecurityGroup
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivatSubnetB

Outputs:
  NATGWIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt 
      - NATGWInstanceA
      - PublicIp
  NATGWDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt 
      - NATGWInstanceA
      - PublicDnsName
  NATGWInstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref NATGWInstanceA
  StackRef:
     Value: !Ref PublicServerA
  TomcatPublicIP:
     Value: !GetAtt PublicServerA.Outputs.PublicIP
  TomcatPublicDNS:
     Value: !GetAtt PublicServerA.Outputs.PublicDNS
  TomcatInstanceId:
     Value: !GetAtt PublicServerA.Outputs.InstanceId
  ZabbixPublicIP:
     Value: !GetAtt PublicServerA.Outputs.ZabbixPublicIP
  ZabbixPublicDNS:
     Value: !GetAtt PublicServerA.Outputs.ZabbixPublicDNS
  ZabbixInstanceId:
     Value: !GetAtt PublicServerA.Outputs.ZabbixInstanceId
     
Mappings:
  RegionMap:
    ap-south-1:
      AMI: ami-0937dcc711d38ef3f
    eu-west-3:
      AMI: ami-0dd7e7ed60da8fb83
    eu-north-1:
      AMI: ami-6d27a913
    eu-west-2:
      AMI: ami-0664a710233d7c148
    eu-west-1:
      AMI: ami-0fad7378adf284ce0
    ap-northeast-2:
      AMI: ami-018a9a930060d38aa
    ap-northeast-1:
      AMI: ami-0d7ed3ddb85b521a6
    sa-east-1:
      AMI: ami-0b04450959586da29
    ca-central-1:
      AMI: ami-0de8b8e4bc1f125fe
    ap-southeast-1:
      AMI: ami-04677bdaa3c2b6e24
    ap-southeast-2:
      AMI: ami-0c9d48b5db609ad6e
    eu-central-1:
      AMI: ami-0eaec5838478eb0ba
    us-east-1:
      AMI: ami-035be7bafff33b6b6
    us-east-2:
      AMI: ami-04328208f4f0cf1fe
    us-west-1:
      AMI: ami-0799ad445b5727125
    us-west-2:
      AMI: ami-032509850cf9ee54e

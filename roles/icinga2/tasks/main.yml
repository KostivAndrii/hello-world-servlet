---
# tasks file for icinga2-ansible-web2-ui
- set_fact:
    mysql_password: "{{ pwd_alias }}$"

- name: Install MySQL 5.7 and Icinga2 repos
  yum:
    name: "{{ item }}"
    state: present
  loop:
    - http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
    - https://packages.icinga.com/epel/icinga-rpm-release-7-latest.noarch.rpm

- name: Install MySQL, httpd, epel and scl repos
  yum:
    name: "{{ item }}"
  loop:
    - epel-release
    - centos-release-scl
    - mysql-community-server
    - mysql-community-client
    - MySQL-python
    - httpd
    - graphite-web
    - python-carbon
    - perl
    - git
    - libsemanage-python
    - python-pip
    - python-devel
    - libffi-devel

- name: pip install docker-py and awscli
  pip:
    name: "{{ item }}"
  loop:
    [ django, django-tagging===0.3.6 ]

- name: graphite-web config file
  template: src=local_settings.py dest=/etc/graphite-web/local_settings.py owner=root group=root mode=644
  notify:
  - restart httpd

- name: create data directory
  file:
    path: /etc/httpd/conf.d/graphite/
    state: directory

- name: graphite-web config file
  copy:
    src: local_settings.py
    dest: /etc/graphite-web/local_settings.py

- name: Start the MySQL and httpd service
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - mysqld
    - httpd
    - carbon-cache

- name: initialize graphite-web database
  command: /usr/bin/graphite-manage syncdb --noinput
  args:
    creates: /var/lib/graphite-web/graphite.db

- name: build graphite  index
  command: /usr/bin/graphite-build-index
  args:
    creates: /var/lib/graphite-web/index

- name: chown the sqlite database to apache.apache
  file: path=/var/lib/graphite-web/ owner=apache group=apache recurse=yes

- name: Change mysql root password and keep track in and store it in /root/.my.cnf
  shell: |
    password_match=`awk '/A temporary password is generated for/ { print $NF }' /var/log/mysqld.log`
    mysql -uroot -p$password_match --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ mysql_password }}'; flush privileges; "
    echo "[client]
    user=root
    password={{ mysql_password }}" > /root/.my.cnf
  args:
    creates: /root/.my.cnf
  register: change_temp_pass

- debug:
    msg: "MySQL root password {{ mysql_password }}"

- name: Install PHP
  yum:
    name: "{{ item }}"
  loop:
    - rh-php71-php-mysqlnd
    - rh-php71-php-cli
    - php-Icinga
    - rh-php71-php-common
    - rh-php71-php-fpm
    - rh-php71-php-pgsql
    - rh-php71-php-ldap
    - rh-php71-php-intl
    - rh-php71-php-xml
    - rh-php71-php-gd
    - rh-php71-php-pdo
    - rh-php71-php-mbstring

- name: Find out timezone
  slurp:
     src: /etc/localtime
  register: etc_localtime

- name: Timezone in php.ini
  lineinfile:
    path: /etc/opt/rh/rh-php71/php.ini
    regexp: '^;?date.timezone ='
    line: 'date.timezone = Europe/Kiev'

- name: Install icinga2
  yum:
    name: "{{ item }}"
  loop:
    - icinga2
    - icinga2-ido-mysql
    - icingaweb2
    - icingacli
    - nagios-plugins-all
    - icingaweb2-selinux
    - icinga2-selinux

- import_tasks: icinga2_web2_create_databases.yml

- name: Start the icinga2 and rh-php71-php-fpm service
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - icinga2
    - rh-php71-php-fpm

- name: restart httpd
  service:
    name: httpd
    state: restarted
    enabled: yes

- name: Get setup token.
  shell: 'icingacli setup token create | sed "s/.*token is: \(.*\)/\1/g"'
  register: setup_token

- name: Icinga Web2 Installation finished
  debug:
    msg: "The WebUI token is {{ setup_token.stdout }}, us it at http://IP//icingaweb2/setup to continue the installation"

# icinga2 feature list
# icinga2 feature enable perfdata graphite
# cd /usr/share/icingaweb2/modules/
# git clone https://github.com/Icinga/icingaweb2-module-graphite graphite
# systemctl restart icinga2
# https://www.linuxtechi.com/install-configure-icinga2-centos-7-rhel-7/

#$ touch /var/www/html/index.html
#$ chmod 755 /var/www/html/index.html

# ===================================================    client install ==============
# yum install https://packages.icinga.com/epel/icinga-rpm-release-7-latest.noarch.rpm
# yum install icinga2
# yum install epel-release
# yum install nagios-plugins-all
# # RHEL sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm
# # RHEL subscription-manager repos --enable rhel-7-server-optional-rpms
# yum install icinga2-selinux
# icinga2 node wizard

# ======================   add host in Icinga2 serveer into
# # https://www.techrepublic.com/article/how-to-add-remote-hosts-to-the-icinga2-monitoring-system/
# vi /etc/icinga2/conf.d/hosts.conf
# ------------------------
# object Host "icinga2c" {
#   import "generic-host"
#   address = "192.168.237.106"
#   check_command = "hostalive"
# }
# ------------------------
# systemctl restart icinga2
# ==========================  API install / config
# icinga2 feature list
# icinga2 feature enable api
# icinga2 api setup
# systemctl restart icinga2
# finish configure backend API: configuration/modules/monitoring/backends/command transport
# use API Username/API Password from /etc/icinga2/conf.d/api-users.conf
# ==========================  director install / config
# username = "director"
# password = "ifVaysRZTnV1fWj7qqjT$"

# CREATE DATABASE director CHARACTER SET 'utf8'; GRANT ALL ON director.* TO director@localhost IDENTIFIED BY 'ifVaysRZTnV1fWj7qqjT$';
# yum install -y git

# mkdir -p /usr/share/icingaweb2/modules
# cd /usr/share/icingaweb2/modules
# sudo git clone https://github.com/Icinga/icingaweb2-module-director.git director

# vi /etc/icingaweb2/resources.ini
# [Director DB]
# type = "db"
# db = "mysql"
# host = "localhost"
# dbname = "director"
# username = "director"
# password = "ifVaysRZTnV1fWj7qqjT$"
# charset = "utf8"

# vi /etc/icinga2/conf.d/api-users.conf
# object ApiUser "director" {
#   password = "ifVaysRZTnV1fWj7qqjT$"
#   permissions = [ "*" ]
# }

# graphite
# icinga2 feature enable perfdata
# git clone https://github.com/Icinga/icingaweb2-module-graphite.git  graphite
# https://www.unixmen.com/install-graphite-centos-7/
# https://www.server-world.info/en/note?os=CentOS_7&p=graphite
# https://sites.google.com/site/salinuxacademy/monitoring/icinga-2/icinga2-and-graphite
# port 8008

# sudo service icinga2 restart

# https://blog.it-kb.ru/2017/01/25/deploy-and-configure-icinga-2-on-debian-8-6-part-6-icinga-director-1-2-0-deployment-and-configuration-of-zones-commands-services-host-templates/
# https://www.howtoforge.com/tutorial/add-a-new-host-and-service-to-be-monitored-by-icinga2/
# https://www.howtoforge.com/how-to-add-hosts-to-icinga2-using-the-icinga-director/

# icinga2 daemon -C - check icinga2 config
# systemctl reload icinga2

# icinga2 object list --type CheckCommand --name nrpe
# cat /usr/share/icinga2/include/command-plugins.conf  - command description
# /usr/lib64/nagios/plugins/
# rpm -ql icinga2
# rpm -qa | grep nagios

# /etc/icinga2/conf.d/
# /etc/icinga2/conf.d/hosts.conf - local host config
# /etc/icinga2/conf.d/template.conf  - local template
# /usr/share/icingaweb2/public/img - icon_image
# host object definition (nagios)
# https://assets.nagios.com/downloads/nagioscore/docs/nagioscore/3/en/objectdefinitions.html
# /usr/share/icinga2/include/command-plugins.conf - command list

# template Host "P1" {
#   import "generic-host"
#   max_check_attempts = 3
#   check_interval = 1m
#   retry_interval = 30s
#   /* select image from folder - /usr/share/icingaweb2/public/img */
#   icon_image = "save.png"

#   check_command = "hostalive"
# }

# template Host "P2" {
#   import "generic-host"
#   max_check_attempts = 4
#   check_interval = 5m
#   retry_interval = 30s
#   icon_image = "service.png"

#   check_command = "hostalive"
# }

# template Host "P3" {
#   import "generic-host"
#   max_check_attempts = 5
#   check_interval = 15m
#   retry_interval = 30s
#   icon_image = "json.png"

#   check_command = "hostalive"
# }

# template Service "service_P1" {
#   max_check_attempts = 4
#   check_interval = 2m
#   retry_interval = 30s
#   icon_image = "success_petrol.png"
# }

# template Service "service_P2" {
#   max_check_attempts = 3
#   check_interval = 10m
#   retry_interval = 30s
#   icon_image = "success.png"
# }

# template Service "service_P3" {
#   max_check_attempts = 2
#   check_interval = 20m
#   retry_interval = 30s
#   icon_image = "pdf.png"
# }

# /etc/icinga2/conf.d/services.conf
# apply Service "service_P1" {
#   import "service_P1"

#   check_command = "ssh"

#   assign where host.vars.servP == "P1"
# }

# apply Service "service_P2" {
#   import "service_P2"

#   check_command = "ssh"

#   assign where host.vars.servP == "P2"
# }

# apply Service "service_P3" {
#   import "service_P3"

#   check_command = "ssh"

#   assign where host.vars.servP == "P3"
# }

# /etc/icinga2/conf.d/hosts.conf
# object Host "icinga2client"  {
#   import "P3"
#   address = "192.168.237.106"
#   vars.os = "Linux"
#   vars.servP = "P3"
#   vars.http_vhosts["http"] = {
#     http_uri = "/"
#   }
#   vars.disks["disk"] = {
#   }
#   vars.disks["disk /"] = {
#     disk_partitions = "/"
#   }
#   vars.notification["mail"] = {
#     groups = [ "icingaadmins" ]
#   }
# }

# object Service "http_icinga2c"  {
#   max_check_attempts = 3
#   check_interval = 10m
#   retry_interval = 30s
#   host_name = "icinga2c"
#   check_command = "http"
# }

# object Service "ssh_icinga2c"  {
#   max_check_attempts = 2
#   check_interval = 20m
#   retry_interval = 30s
#   host_name = "icinga2c"
#   check_command = "ssh"
# }

# http://formvalidate.com/how-to-configure-graphite-into-centos-linux

# !!!!!!!!!!!!!!!!! Working !!!!!!!!!!!!!!
# https://github.com/nestihacky/ansible-role-graphite
# https://sites.google.com/site/salinuxacademy/monitoring/icinga-2/icinga2-and-graphite
# !!!!!!!!!!!!!!!!! Working !!!!!!!!!!!!!!

# yum install -y http://epel.mirror.constant.com/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm
# yum install graphite-web python-carbon libsemanage-python python-pip python-devel libffi-devel perl git httpd
# pip install django
# pip show django-tagging
# pip uninstall django-tagging
# pip install django-tagging===0.3.6

# vi /etc/graphite-web/local_settings.py (SECRET_KEY, TIME_ZONE, DATABASES)

# mkdir -p /etc/httpd/conf.d/graphite/
# vi /etc/httpd/conf.d/graphite/graphite-web.conf
# '''
# DocumentRoot "/usr/share/graphite/webapp"

# Header set Access-Control-Allow-Origin "*"
# # Header set Access-Control-Allow-Methods "GET, OPTIONS"
# # Header set Access-Control-Allow-Headers "origin, authorization, accept"
# # Header set Access-Control-Allow-Credentials true

# WSGIScriptAlias / /usr/share/graphite/graphite-web.wsgi
# WSGIImportScript /usr/share/graphite/graphite-web.wsgi process-group=%{GLOBAL} application-group=%{GLOBAL}

# <Location "/content/">
#     SetHandler None
# </Location>

# Alias /media/ "/usr/lib/python2.7/site-packages/django/contrib/admin/media/"
# <Location "/media/">
#     SetHandler None
# </Location>

# <Directory "/usr/share/graphite/">
#     <IfModule mod_authz_core.c>
#         <Files graphite-web.wsgi>
#             Require all granted
#         </Files>
#     </IfModule>
# </Directory>
# '''



# vi /etc/carbon/carbon.conf           (no change)
# vi /etc/carbon/storage-schemas.conf  (no change)

# systemctl enable httpd
# systemctl start httpd

# systemctl status carbon-cache
# systemctl enable carbon-cache
# systemctl start carbon-cache
# systemctl status carbon-cache

# /usr/bin/graphite-manage syncdb --noinput
# ls -la /var/lib/graphite-web/graphite.db
# chown -R apache:apache /var/lib/graphite-web/
# systemctl restart carbon-cache
# systemctl restart httpd

# icinga2 feature list
# icinga2 feature enable perfdata graphite
# cd /usr/share/icingaweb2/modules/
# git clone https://github.com/Icinga/icingaweb2-module-graphite graphite
# systemctl restart icinga2




# !!!!!!!!!!!!!!!!! full install  !!!!!!!!!!!!!!
# https://comtronic.com.au/how-to-install-graphite-on-centos7/
# yum install httpd mod_wsgi python-pip python-devel git pycairo libffi-devel
# cd /usr/local/src
# git clone https://github.com/graphite-project/graphite-web.git
# git clone https://github.com/graphite-project/carbon.git
# python /usr/local/src/graphite-web/check-dependencies.py
# yum install gcc
# pip install -r /usr/local/src/graphite-web/requirements.txt
# python -m pip install --upgrade pip setuptools
# python -m pip install django
# pip install -r /usr/local/src/graphite-web/requirements.txt
# pip show django-tagging
# python /usr/local/src/graphite-web/check-dependencies.py
# cd /usr/local/src/carbon/
# python setup.py install
# cd /usr/local/src/graphite-web/
# sudo python setup.py install
# cp /opt/graphite/conf/carbon.conf.example /opt/graphite/conf/carbon.conf
# cp /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf
# vi /opt/graphite/conf/storage-schemas.conf
# cp /opt/graphite/conf/storage-aggregation.conf.example /opt/graphite/conf/storage-aggregation.conf
# vi /opt/graphite/conf/storage-aggregation.conf
# cp /opt/graphite/conf/relay-rules.conf.example /opt/graphite/conf/relay-rules.conf
# vi /opt/graphite/conf/relay-rules.conf
# vi /opt/graphite/conf/carbon.conf
# cp /opt/graphite/conf/aggregation-rules.conf.example /opt/graphite/conf/aggregation-rules.conf
# vi opt/graphite/conf/aggregation-rules.conf
# vi /opt/graphite/conf/aggregation-rules.conf.example
# vi /opt/graphite/conf/aggregation-rules.conf
# ls /usr/local/src/carbon/distro/redhat/init.d/carbon-*
# cp /usr/local/src/carbon/distro/redhat/init.d/carbon-* /etc/init.d/
# chmod +x /etc/init.d/carbon-*
# ls -la /etc/init.d/carbon-*
# systemctl start carbon-cache
# systemctl start carbon-relay
# systemctl start carbon-aggregator
# cp /opt/graphite/webapp/graphite/local_settings.py.example /opt/graphite/webapp/graphite/local_settings.py
# vi /opt/graphite/webapp/graphite/local_settings.py
# cd /opt/graphite
# sudo PYTHONPATH=/opt/graphite/webapp/ django-admin.py migrate --settings=graphite.settings
# sudo PYTHONPATH=/opt/graphite/webapp/ django-admin.py collectstatic --settings=graphite.settings
# chown -R apache:apache /opt/graphite/storage/
# chown -R apache:apache /opt/graphite/static/
# chown -R apache:apache /opt/graphite/webapp/
# cp /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi
# cp /opt/graphite/examples/example-graphite-vhost.conf /etc/httpd/conf.d/graphite.conf
# vi /etc/httpd/conf.d/graphite.conf
# pwd
# mkdir /opt/graphite/secure
# chown -R apache:apache /opt/graphite/secure
# htpasswd -c /opt/graphite/secure/.passwd sammy
# vi /etc/httpd/conf.d/graphite.conf
# systemctl stop httpd
# systemctl start httpd
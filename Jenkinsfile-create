pipeline {
    agent any
    parameters {
      string(defaultValue: "STAGE", description: 'What environment?', name: 'AWS_ENV')
    }        
    environment {
        aws_key_name = 'aws-test-oregon'
    }
    stages {
        stage ('Clone') {
            steps {
                git branch: 'develop', url: "https://github.com/KostivAndrii/hello-world-servlet.git"
            }
        } 
        stage ('Create AWS') {
            steps {
                echo 'Creating environment in AWS and CM Tomcat there'
                sh 'pwd'
                sh 'ls -la'
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_JENKINS']]) {
                  sh 'aws cloudformation create-stack --stack-name PROD --template-body file://./ec2.yaml --parameters ParameterKey=KeyName,ParameterValue=$aws_key_name ParameterKey=Environment,ParameterValue=${AWS_ENV} ParameterKey=NATGWInstanceTypeParameter,ParameterValue=t2.micro ParameterKey=VPCBlock,ParameterValue="10.0.0.0/16" ParameterKey=PublicSubnetACIDR,ParameterValue="10.0.10.0/24" ParameterKey=PrivateSubnetACIDR,ParameterValue="10.0.11.0/24" ParameterKey=PublicSubnetBCIDR,ParameterValue="10.0.20.0/24" ParameterKey=PrivateSubnetBCIDR,ParameterValue="10.0.21.0/24"'
                }
//                sh 'sleep 120'
                timeout(5) {
                    waitUntil {
                       withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_JENKINS']]) {
                           script {
                             def StackStatus = sh (
                                    label: 'GET_STACK_STATUS', 
                                    returnStdout: true, 
                                    script: 'aws cloudformation describe-stacks --query "Stacks[*].StackStatus" --output=text --stack-name PROD').trim()
//                             def StackStatus = sh script: 'aws cloudformation describe-stacks --query "Stacks[*].StackStatus" --output=text --stack-name PROD', returnStatus: true
                             echo StackStatus
                             return (StackStatus == 'CREATE_COMPLETE');
                           }
                       }
                    }
                }                
//                waitUntil {    // some block }
//                sh './aws_create.sh'
            }
        }      
        stage ('Launching Ansible with dynamic inventory') {
            steps {
                echo 'Appying CM'
                sh 'pwd'
                sh 'ls -la'
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_JENKINS']]) {
                    ansiblePlaybook (
                        colorized: true, 
                        credentialsId: 'aws-test-oregon', 
                        disableHostKeyChecking: true, 
                        installation: 'Ansible', 
                        inventory: './inventory/ec2.py', 
                        limit: 'tag_VM_Tomcat:tag_VM_Zabbix', 
//                        limit: 'tag_VM_Tomcat', 
                        playbook: './site.yaml'
                    )
                }
/*                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_JENKINS']]) {
                    ansiblePlaybook (
                        colorized: true, 
                        credentialsId: 'aws-test-oregon', 
                        disableHostKeyChecking: true, 
                        installation: 'Ansible', 
                        inventory: './inventory/ec2.py', 
                        limit: 'tag_VM_Zabbix', 
                        playbook: './zabbix.yml'
                    )
                } */
            }
        }      
    }
}

